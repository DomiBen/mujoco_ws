// Generated by gencpp from file mujoco_ros_msgs/SetBodyStateRequest.msg
// DO NOT EDIT!


#ifndef MUJOCO_ROS_MSGS_MESSAGE_SETBODYSTATEREQUEST_H
#define MUJOCO_ROS_MSGS_MESSAGE_SETBODYSTATEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mujoco_ros_msgs/BodyState.h>

namespace mujoco_ros_msgs
{
template <class ContainerAllocator>
struct SetBodyStateRequest_
{
  typedef SetBodyStateRequest_<ContainerAllocator> Type;

  SetBodyStateRequest_()
    : state()
    , set_pose(false)
    , set_twist(false)
    , set_mass(false)
    , reset_qpos(false)
    , admin_hash()  {
    }
  SetBodyStateRequest_(const ContainerAllocator& _alloc)
    : state(_alloc)
    , set_pose(false)
    , set_twist(false)
    , set_mass(false)
    , reset_qpos(false)
    , admin_hash(_alloc)  {
  (void)_alloc;
    }



   typedef  ::mujoco_ros_msgs::BodyState_<ContainerAllocator>  _state_type;
  _state_type state;

   typedef uint8_t _set_pose_type;
  _set_pose_type set_pose;

   typedef uint8_t _set_twist_type;
  _set_twist_type set_twist;

   typedef uint8_t _set_mass_type;
  _set_mass_type set_mass;

   typedef uint8_t _reset_qpos_type;
  _reset_qpos_type reset_qpos;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _admin_hash_type;
  _admin_hash_type admin_hash;





  typedef boost::shared_ptr< ::mujoco_ros_msgs::SetBodyStateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mujoco_ros_msgs::SetBodyStateRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetBodyStateRequest_

typedef ::mujoco_ros_msgs::SetBodyStateRequest_<std::allocator<void> > SetBodyStateRequest;

typedef boost::shared_ptr< ::mujoco_ros_msgs::SetBodyStateRequest > SetBodyStateRequestPtr;
typedef boost::shared_ptr< ::mujoco_ros_msgs::SetBodyStateRequest const> SetBodyStateRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mujoco_ros_msgs::SetBodyStateRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mujoco_ros_msgs::SetBodyStateRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mujoco_ros_msgs::SetBodyStateRequest_<ContainerAllocator1> & lhs, const ::mujoco_ros_msgs::SetBodyStateRequest_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state &&
    lhs.set_pose == rhs.set_pose &&
    lhs.set_twist == rhs.set_twist &&
    lhs.set_mass == rhs.set_mass &&
    lhs.reset_qpos == rhs.reset_qpos &&
    lhs.admin_hash == rhs.admin_hash;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mujoco_ros_msgs::SetBodyStateRequest_<ContainerAllocator1> & lhs, const ::mujoco_ros_msgs::SetBodyStateRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mujoco_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mujoco_ros_msgs::SetBodyStateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mujoco_ros_msgs::SetBodyStateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mujoco_ros_msgs::SetBodyStateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mujoco_ros_msgs::SetBodyStateRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mujoco_ros_msgs::SetBodyStateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mujoco_ros_msgs::SetBodyStateRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mujoco_ros_msgs::SetBodyStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7871b44af6e6afd801e968f9f575e766";
  }

  static const char* value(const ::mujoco_ros_msgs::SetBodyStateRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7871b44af6e6afd8ULL;
  static const uint64_t static_value2 = 0x01e968f9f575e766ULL;
};

template<class ContainerAllocator>
struct DataType< ::mujoco_ros_msgs::SetBodyStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mujoco_ros_msgs/SetBodyStateRequest";
  }

  static const char* value(const ::mujoco_ros_msgs::SetBodyStateRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mujoco_ros_msgs::SetBodyStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mujoco_ros_msgs/BodyState state\n"
"bool set_pose\n"
"bool set_twist\n"
"bool set_mass\n"
"bool reset_qpos\n"
"string admin_hash\n"
"\n"
"================================================================================\n"
"MSG: mujoco_ros_msgs/BodyState\n"
"string name                 # this can either be the body name or name of a geom belongig to the body.\n"
"geometry_msgs/PoseStamped pose\n"
"geometry_msgs/TwistStamped twist\n"
"float32 mass\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TwistStamped\n"
"# A twist with reference coordinate frame and timestamp\n"
"Header header\n"
"Twist twist\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::mujoco_ros_msgs::SetBodyStateRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mujoco_ros_msgs::SetBodyStateRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.set_pose);
      stream.next(m.set_twist);
      stream.next(m.set_mass);
      stream.next(m.reset_qpos);
      stream.next(m.admin_hash);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetBodyStateRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mujoco_ros_msgs::SetBodyStateRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mujoco_ros_msgs::SetBodyStateRequest_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    s << std::endl;
    Printer< ::mujoco_ros_msgs::BodyState_<ContainerAllocator> >::stream(s, indent + "  ", v.state);
    s << indent << "set_pose: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_pose);
    s << indent << "set_twist: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_twist);
    s << indent << "set_mass: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_mass);
    s << indent << "reset_qpos: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset_qpos);
    s << indent << "admin_hash: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.admin_hash);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MUJOCO_ROS_MSGS_MESSAGE_SETBODYSTATEREQUEST_H
