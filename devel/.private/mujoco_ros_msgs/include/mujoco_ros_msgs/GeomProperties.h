// Generated by gencpp from file mujoco_ros_msgs/GeomProperties.msg
// DO NOT EDIT!


#ifndef MUJOCO_ROS_MSGS_MESSAGE_GEOMPROPERTIES_H
#define MUJOCO_ROS_MSGS_MESSAGE_GEOMPROPERTIES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mujoco_ros_msgs/GeomType.h>

namespace mujoco_ros_msgs
{
template <class ContainerAllocator>
struct GeomProperties_
{
  typedef GeomProperties_<ContainerAllocator> Type;

  GeomProperties_()
    : name()
    , type()
    , body_mass(0.0)
    , size_0(0.0)
    , size_1(0.0)
    , size_2(0.0)
    , friction_slide(0.0)
    , friction_spin(0.0)
    , friction_roll(0.0)  {
    }
  GeomProperties_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , type(_alloc)
    , body_mass(0.0)
    , size_0(0.0)
    , size_1(0.0)
    , size_2(0.0)
    , friction_slide(0.0)
    , friction_spin(0.0)
    , friction_roll(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef  ::mujoco_ros_msgs::GeomType_<ContainerAllocator>  _type_type;
  _type_type type;

   typedef float _body_mass_type;
  _body_mass_type body_mass;

   typedef float _size_0_type;
  _size_0_type size_0;

   typedef float _size_1_type;
  _size_1_type size_1;

   typedef float _size_2_type;
  _size_2_type size_2;

   typedef float _friction_slide_type;
  _friction_slide_type friction_slide;

   typedef float _friction_spin_type;
  _friction_spin_type friction_spin;

   typedef float _friction_roll_type;
  _friction_roll_type friction_roll;





  typedef boost::shared_ptr< ::mujoco_ros_msgs::GeomProperties_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mujoco_ros_msgs::GeomProperties_<ContainerAllocator> const> ConstPtr;

}; // struct GeomProperties_

typedef ::mujoco_ros_msgs::GeomProperties_<std::allocator<void> > GeomProperties;

typedef boost::shared_ptr< ::mujoco_ros_msgs::GeomProperties > GeomPropertiesPtr;
typedef boost::shared_ptr< ::mujoco_ros_msgs::GeomProperties const> GeomPropertiesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mujoco_ros_msgs::GeomProperties_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mujoco_ros_msgs::GeomProperties_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mujoco_ros_msgs::GeomProperties_<ContainerAllocator1> & lhs, const ::mujoco_ros_msgs::GeomProperties_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.type == rhs.type &&
    lhs.body_mass == rhs.body_mass &&
    lhs.size_0 == rhs.size_0 &&
    lhs.size_1 == rhs.size_1 &&
    lhs.size_2 == rhs.size_2 &&
    lhs.friction_slide == rhs.friction_slide &&
    lhs.friction_spin == rhs.friction_spin &&
    lhs.friction_roll == rhs.friction_roll;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mujoco_ros_msgs::GeomProperties_<ContainerAllocator1> & lhs, const ::mujoco_ros_msgs::GeomProperties_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mujoco_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mujoco_ros_msgs::GeomProperties_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mujoco_ros_msgs::GeomProperties_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mujoco_ros_msgs::GeomProperties_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mujoco_ros_msgs::GeomProperties_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mujoco_ros_msgs::GeomProperties_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mujoco_ros_msgs::GeomProperties_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mujoco_ros_msgs::GeomProperties_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf0bfaf1ba9ee978c70396532fa14531";
  }

  static const char* value(const ::mujoco_ros_msgs::GeomProperties_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf0bfaf1ba9ee978ULL;
  static const uint64_t static_value2 = 0xc70396532fa14531ULL;
};

template<class ContainerAllocator>
struct DataType< ::mujoco_ros_msgs::GeomProperties_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mujoco_ros_msgs/GeomProperties";
  }

  static const char* value(const ::mujoco_ros_msgs::GeomProperties_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mujoco_ros_msgs::GeomProperties_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"mujoco_ros_msgs/GeomType type\n"
"float32 body_mass # total mass of the body this geom belongs to\n"
"float32 size_0\n"
"float32 size_1\n"
"float32 size_2\n"
"float32 friction_slide\n"
"float32 friction_spin\n"
"float32 friction_roll\n"
"\n"
"================================================================================\n"
"MSG: mujoco_ros_msgs/GeomType\n"
"uint16 value\n"
"uint16 PLANE=0\n"
"uint16 HFIELD=1\n"
"uint16 SPHERE=2\n"
"uint16 CAPSULE=3\n"
"uint16 ELLIPSOID=4\n"
"uint16 CYLINDER=5\n"
"uint16 BOX=6\n"
"uint16 MESH=7\n"
"uint16 GEOM_NONE = 1001\n"
;
  }

  static const char* value(const ::mujoco_ros_msgs::GeomProperties_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mujoco_ros_msgs::GeomProperties_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.type);
      stream.next(m.body_mass);
      stream.next(m.size_0);
      stream.next(m.size_1);
      stream.next(m.size_2);
      stream.next(m.friction_slide);
      stream.next(m.friction_spin);
      stream.next(m.friction_roll);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GeomProperties_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mujoco_ros_msgs::GeomProperties_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mujoco_ros_msgs::GeomProperties_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "type: ";
    s << std::endl;
    Printer< ::mujoco_ros_msgs::GeomType_<ContainerAllocator> >::stream(s, indent + "  ", v.type);
    s << indent << "body_mass: ";
    Printer<float>::stream(s, indent + "  ", v.body_mass);
    s << indent << "size_0: ";
    Printer<float>::stream(s, indent + "  ", v.size_0);
    s << indent << "size_1: ";
    Printer<float>::stream(s, indent + "  ", v.size_1);
    s << indent << "size_2: ";
    Printer<float>::stream(s, indent + "  ", v.size_2);
    s << indent << "friction_slide: ";
    Printer<float>::stream(s, indent + "  ", v.friction_slide);
    s << indent << "friction_spin: ";
    Printer<float>::stream(s, indent + "  ", v.friction_spin);
    s << indent << "friction_roll: ";
    Printer<float>::stream(s, indent + "  ", v.friction_roll);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MUJOCO_ROS_MSGS_MESSAGE_GEOMPROPERTIES_H
