// Generated by gencpp from file mujoco_ros_msgs/SensorNoiseModel.msg
// DO NOT EDIT!


#ifndef MUJOCO_ROS_MSGS_MESSAGE_SENSORNOISEMODEL_H
#define MUJOCO_ROS_MSGS_MESSAGE_SENSORNOISEMODEL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mujoco_ros_msgs
{
template <class ContainerAllocator>
struct SensorNoiseModel_
{
  typedef SensorNoiseModel_<ContainerAllocator> Type;

  SensorNoiseModel_()
    : sensor_name()
    , mean()
    , std()
    , set_flag(0)  {
    }
  SensorNoiseModel_(const ContainerAllocator& _alloc)
    : sensor_name(_alloc)
    , mean(_alloc)
    , std(_alloc)
    , set_flag(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _sensor_name_type;
  _sensor_name_type sensor_name;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _mean_type;
  _mean_type mean;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _std_type;
  _std_type std;

   typedef uint8_t _set_flag_type;
  _set_flag_type set_flag;





  typedef boost::shared_ptr< ::mujoco_ros_msgs::SensorNoiseModel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mujoco_ros_msgs::SensorNoiseModel_<ContainerAllocator> const> ConstPtr;

}; // struct SensorNoiseModel_

typedef ::mujoco_ros_msgs::SensorNoiseModel_<std::allocator<void> > SensorNoiseModel;

typedef boost::shared_ptr< ::mujoco_ros_msgs::SensorNoiseModel > SensorNoiseModelPtr;
typedef boost::shared_ptr< ::mujoco_ros_msgs::SensorNoiseModel const> SensorNoiseModelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mujoco_ros_msgs::SensorNoiseModel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mujoco_ros_msgs::SensorNoiseModel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mujoco_ros_msgs::SensorNoiseModel_<ContainerAllocator1> & lhs, const ::mujoco_ros_msgs::SensorNoiseModel_<ContainerAllocator2> & rhs)
{
  return lhs.sensor_name == rhs.sensor_name &&
    lhs.mean == rhs.mean &&
    lhs.std == rhs.std &&
    lhs.set_flag == rhs.set_flag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mujoco_ros_msgs::SensorNoiseModel_<ContainerAllocator1> & lhs, const ::mujoco_ros_msgs::SensorNoiseModel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mujoco_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mujoco_ros_msgs::SensorNoiseModel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mujoco_ros_msgs::SensorNoiseModel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mujoco_ros_msgs::SensorNoiseModel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mujoco_ros_msgs::SensorNoiseModel_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mujoco_ros_msgs::SensorNoiseModel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mujoco_ros_msgs::SensorNoiseModel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mujoco_ros_msgs::SensorNoiseModel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ecdfe0a7e1630fddef7c31cf04081974";
  }

  static const char* value(const ::mujoco_ros_msgs::SensorNoiseModel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xecdfe0a7e1630fddULL;
  static const uint64_t static_value2 = 0xef7c31cf04081974ULL;
};

template<class ContainerAllocator>
struct DataType< ::mujoco_ros_msgs::SensorNoiseModel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mujoco_ros_msgs/SensorNoiseModel";
  }

  static const char* value(const ::mujoco_ros_msgs::SensorNoiseModel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mujoco_ros_msgs::SensorNoiseModel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Set the noise model of a sensor defining mean and standard deviation for each dimension\n"
"# For quaternion sensors noise is calculated in euler angles (rad), converted to a quaternion and then applied. Thus only three mean/std pairs are required!\n"
"string sensor_name\n"
"float64[] mean\n"
"float64[] std\n"
"uint8 set_flag\n"
;
  }

  static const char* value(const ::mujoco_ros_msgs::SensorNoiseModel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mujoco_ros_msgs::SensorNoiseModel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sensor_name);
      stream.next(m.mean);
      stream.next(m.std);
      stream.next(m.set_flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorNoiseModel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mujoco_ros_msgs::SensorNoiseModel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mujoco_ros_msgs::SensorNoiseModel_<ContainerAllocator>& v)
  {
    s << indent << "sensor_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.sensor_name);
    s << indent << "mean[]" << std::endl;
    for (size_t i = 0; i < v.mean.size(); ++i)
    {
      s << indent << "  mean[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.mean[i]);
    }
    s << indent << "std[]" << std::endl;
    for (size_t i = 0; i < v.std.size(); ++i)
    {
      s << indent << "  std[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.std[i]);
    }
    s << indent << "set_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MUJOCO_ROS_MSGS_MESSAGE_SENSORNOISEMODEL_H
