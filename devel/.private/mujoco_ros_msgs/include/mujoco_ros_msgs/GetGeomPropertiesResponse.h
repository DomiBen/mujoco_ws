// Generated by gencpp from file mujoco_ros_msgs/GetGeomPropertiesResponse.msg
// DO NOT EDIT!


#ifndef MUJOCO_ROS_MSGS_MESSAGE_GETGEOMPROPERTIESRESPONSE_H
#define MUJOCO_ROS_MSGS_MESSAGE_GETGEOMPROPERTIESRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mujoco_ros_msgs/GeomProperties.h>

namespace mujoco_ros_msgs
{
template <class ContainerAllocator>
struct GetGeomPropertiesResponse_
{
  typedef GetGeomPropertiesResponse_<ContainerAllocator> Type;

  GetGeomPropertiesResponse_()
    : properties()
    , success(false)
    , status_message()  {
    }
  GetGeomPropertiesResponse_(const ContainerAllocator& _alloc)
    : properties(_alloc)
    , success(false)
    , status_message(_alloc)  {
  (void)_alloc;
    }



   typedef  ::mujoco_ros_msgs::GeomProperties_<ContainerAllocator>  _properties_type;
  _properties_type properties;

   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _status_message_type;
  _status_message_type status_message;





  typedef boost::shared_ptr< ::mujoco_ros_msgs::GetGeomPropertiesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mujoco_ros_msgs::GetGeomPropertiesResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetGeomPropertiesResponse_

typedef ::mujoco_ros_msgs::GetGeomPropertiesResponse_<std::allocator<void> > GetGeomPropertiesResponse;

typedef boost::shared_ptr< ::mujoco_ros_msgs::GetGeomPropertiesResponse > GetGeomPropertiesResponsePtr;
typedef boost::shared_ptr< ::mujoco_ros_msgs::GetGeomPropertiesResponse const> GetGeomPropertiesResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mujoco_ros_msgs::GetGeomPropertiesResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mujoco_ros_msgs::GetGeomPropertiesResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mujoco_ros_msgs::GetGeomPropertiesResponse_<ContainerAllocator1> & lhs, const ::mujoco_ros_msgs::GetGeomPropertiesResponse_<ContainerAllocator2> & rhs)
{
  return lhs.properties == rhs.properties &&
    lhs.success == rhs.success &&
    lhs.status_message == rhs.status_message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mujoco_ros_msgs::GetGeomPropertiesResponse_<ContainerAllocator1> & lhs, const ::mujoco_ros_msgs::GetGeomPropertiesResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mujoco_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mujoco_ros_msgs::GetGeomPropertiesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mujoco_ros_msgs::GetGeomPropertiesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mujoco_ros_msgs::GetGeomPropertiesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mujoco_ros_msgs::GetGeomPropertiesResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mujoco_ros_msgs::GetGeomPropertiesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mujoco_ros_msgs::GetGeomPropertiesResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mujoco_ros_msgs::GetGeomPropertiesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "55ee8b0f1aee0c42a9390bea52b5aefb";
  }

  static const char* value(const ::mujoco_ros_msgs::GetGeomPropertiesResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x55ee8b0f1aee0c42ULL;
  static const uint64_t static_value2 = 0xa9390bea52b5aefbULL;
};

template<class ContainerAllocator>
struct DataType< ::mujoco_ros_msgs::GetGeomPropertiesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mujoco_ros_msgs/GetGeomPropertiesResponse";
  }

  static const char* value(const ::mujoco_ros_msgs::GetGeomPropertiesResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mujoco_ros_msgs::GetGeomPropertiesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mujoco_ros_msgs/GeomProperties properties\n"
"bool success\n"
"string status_message\n"
"\n"
"\n"
"================================================================================\n"
"MSG: mujoco_ros_msgs/GeomProperties\n"
"string name\n"
"mujoco_ros_msgs/GeomType type\n"
"float32 body_mass # total mass of the body this geom belongs to\n"
"float32 size_0\n"
"float32 size_1\n"
"float32 size_2\n"
"float32 friction_slide\n"
"float32 friction_spin\n"
"float32 friction_roll\n"
"\n"
"================================================================================\n"
"MSG: mujoco_ros_msgs/GeomType\n"
"uint16 value\n"
"uint16 PLANE=0\n"
"uint16 HFIELD=1\n"
"uint16 SPHERE=2\n"
"uint16 CAPSULE=3\n"
"uint16 ELLIPSOID=4\n"
"uint16 CYLINDER=5\n"
"uint16 BOX=6\n"
"uint16 MESH=7\n"
"uint16 GEOM_NONE = 1001\n"
;
  }

  static const char* value(const ::mujoco_ros_msgs::GetGeomPropertiesResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mujoco_ros_msgs::GetGeomPropertiesResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.properties);
      stream.next(m.success);
      stream.next(m.status_message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetGeomPropertiesResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mujoco_ros_msgs::GetGeomPropertiesResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mujoco_ros_msgs::GetGeomPropertiesResponse_<ContainerAllocator>& v)
  {
    s << indent << "properties: ";
    s << std::endl;
    Printer< ::mujoco_ros_msgs::GeomProperties_<ContainerAllocator> >::stream(s, indent + "  ", v.properties);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "status_message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.status_message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MUJOCO_ROS_MSGS_MESSAGE_GETGEOMPROPERTIESRESPONSE_H
