// Generated by gencpp from file mujoco_ros_msgs/GeomType.msg
// DO NOT EDIT!


#ifndef MUJOCO_ROS_MSGS_MESSAGE_GEOMTYPE_H
#define MUJOCO_ROS_MSGS_MESSAGE_GEOMTYPE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mujoco_ros_msgs
{
template <class ContainerAllocator>
struct GeomType_
{
  typedef GeomType_<ContainerAllocator> Type;

  GeomType_()
    : value(0)  {
    }
  GeomType_(const ContainerAllocator& _alloc)
    : value(0)  {
  (void)_alloc;
    }



   typedef uint16_t _value_type;
  _value_type value;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(PLANE)
  #undef PLANE
#endif
#if defined(_WIN32) && defined(HFIELD)
  #undef HFIELD
#endif
#if defined(_WIN32) && defined(SPHERE)
  #undef SPHERE
#endif
#if defined(_WIN32) && defined(CAPSULE)
  #undef CAPSULE
#endif
#if defined(_WIN32) && defined(ELLIPSOID)
  #undef ELLIPSOID
#endif
#if defined(_WIN32) && defined(CYLINDER)
  #undef CYLINDER
#endif
#if defined(_WIN32) && defined(BOX)
  #undef BOX
#endif
#if defined(_WIN32) && defined(MESH)
  #undef MESH
#endif
#if defined(_WIN32) && defined(GEOM_NONE)
  #undef GEOM_NONE
#endif

  enum {
    PLANE = 0u,
    HFIELD = 1u,
    SPHERE = 2u,
    CAPSULE = 3u,
    ELLIPSOID = 4u,
    CYLINDER = 5u,
    BOX = 6u,
    MESH = 7u,
    GEOM_NONE = 1001u,
  };


  typedef boost::shared_ptr< ::mujoco_ros_msgs::GeomType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mujoco_ros_msgs::GeomType_<ContainerAllocator> const> ConstPtr;

}; // struct GeomType_

typedef ::mujoco_ros_msgs::GeomType_<std::allocator<void> > GeomType;

typedef boost::shared_ptr< ::mujoco_ros_msgs::GeomType > GeomTypePtr;
typedef boost::shared_ptr< ::mujoco_ros_msgs::GeomType const> GeomTypeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mujoco_ros_msgs::GeomType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mujoco_ros_msgs::GeomType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mujoco_ros_msgs::GeomType_<ContainerAllocator1> & lhs, const ::mujoco_ros_msgs::GeomType_<ContainerAllocator2> & rhs)
{
  return lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mujoco_ros_msgs::GeomType_<ContainerAllocator1> & lhs, const ::mujoco_ros_msgs::GeomType_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mujoco_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mujoco_ros_msgs::GeomType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mujoco_ros_msgs::GeomType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mujoco_ros_msgs::GeomType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mujoco_ros_msgs::GeomType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mujoco_ros_msgs::GeomType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mujoco_ros_msgs::GeomType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mujoco_ros_msgs::GeomType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9a7c37d926d01c7f41edb14bd36b3b02";
  }

  static const char* value(const ::mujoco_ros_msgs::GeomType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9a7c37d926d01c7fULL;
  static const uint64_t static_value2 = 0x41edb14bd36b3b02ULL;
};

template<class ContainerAllocator>
struct DataType< ::mujoco_ros_msgs::GeomType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mujoco_ros_msgs/GeomType";
  }

  static const char* value(const ::mujoco_ros_msgs::GeomType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mujoco_ros_msgs::GeomType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 value\n"
"uint16 PLANE=0\n"
"uint16 HFIELD=1\n"
"uint16 SPHERE=2\n"
"uint16 CAPSULE=3\n"
"uint16 ELLIPSOID=4\n"
"uint16 CYLINDER=5\n"
"uint16 BOX=6\n"
"uint16 MESH=7\n"
"uint16 GEOM_NONE = 1001\n"
;
  }

  static const char* value(const ::mujoco_ros_msgs::GeomType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mujoco_ros_msgs::GeomType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GeomType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mujoco_ros_msgs::GeomType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mujoco_ros_msgs::GeomType_<ContainerAllocator>& v)
  {
    s << indent << "value: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MUJOCO_ROS_MSGS_MESSAGE_GEOMTYPE_H
