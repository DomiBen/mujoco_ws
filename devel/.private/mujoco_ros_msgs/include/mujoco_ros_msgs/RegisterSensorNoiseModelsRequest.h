// Generated by gencpp from file mujoco_ros_msgs/RegisterSensorNoiseModelsRequest.msg
// DO NOT EDIT!


#ifndef MUJOCO_ROS_MSGS_MESSAGE_REGISTERSENSORNOISEMODELSREQUEST_H
#define MUJOCO_ROS_MSGS_MESSAGE_REGISTERSENSORNOISEMODELSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mujoco_ros_msgs/SensorNoiseModel.h>

namespace mujoco_ros_msgs
{
template <class ContainerAllocator>
struct RegisterSensorNoiseModelsRequest_
{
  typedef RegisterSensorNoiseModelsRequest_<ContainerAllocator> Type;

  RegisterSensorNoiseModelsRequest_()
    : noise_models()
    , admin_hash()  {
    }
  RegisterSensorNoiseModelsRequest_(const ContainerAllocator& _alloc)
    : noise_models(_alloc)
    , admin_hash(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::mujoco_ros_msgs::SensorNoiseModel_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::mujoco_ros_msgs::SensorNoiseModel_<ContainerAllocator> >> _noise_models_type;
  _noise_models_type noise_models;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _admin_hash_type;
  _admin_hash_type admin_hash;





  typedef boost::shared_ptr< ::mujoco_ros_msgs::RegisterSensorNoiseModelsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mujoco_ros_msgs::RegisterSensorNoiseModelsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RegisterSensorNoiseModelsRequest_

typedef ::mujoco_ros_msgs::RegisterSensorNoiseModelsRequest_<std::allocator<void> > RegisterSensorNoiseModelsRequest;

typedef boost::shared_ptr< ::mujoco_ros_msgs::RegisterSensorNoiseModelsRequest > RegisterSensorNoiseModelsRequestPtr;
typedef boost::shared_ptr< ::mujoco_ros_msgs::RegisterSensorNoiseModelsRequest const> RegisterSensorNoiseModelsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mujoco_ros_msgs::RegisterSensorNoiseModelsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mujoco_ros_msgs::RegisterSensorNoiseModelsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mujoco_ros_msgs::RegisterSensorNoiseModelsRequest_<ContainerAllocator1> & lhs, const ::mujoco_ros_msgs::RegisterSensorNoiseModelsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.noise_models == rhs.noise_models &&
    lhs.admin_hash == rhs.admin_hash;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mujoco_ros_msgs::RegisterSensorNoiseModelsRequest_<ContainerAllocator1> & lhs, const ::mujoco_ros_msgs::RegisterSensorNoiseModelsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mujoco_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mujoco_ros_msgs::RegisterSensorNoiseModelsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mujoco_ros_msgs::RegisterSensorNoiseModelsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mujoco_ros_msgs::RegisterSensorNoiseModelsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mujoco_ros_msgs::RegisterSensorNoiseModelsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mujoco_ros_msgs::RegisterSensorNoiseModelsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mujoco_ros_msgs::RegisterSensorNoiseModelsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mujoco_ros_msgs::RegisterSensorNoiseModelsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d47e7aa107d3e4664f1bd384900bfab2";
  }

  static const char* value(const ::mujoco_ros_msgs::RegisterSensorNoiseModelsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd47e7aa107d3e466ULL;
  static const uint64_t static_value2 = 0x4f1bd384900bfab2ULL;
};

template<class ContainerAllocator>
struct DataType< ::mujoco_ros_msgs::RegisterSensorNoiseModelsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mujoco_ros_msgs/RegisterSensorNoiseModelsRequest";
  }

  static const char* value(const ::mujoco_ros_msgs::RegisterSensorNoiseModelsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mujoco_ros_msgs::RegisterSensorNoiseModelsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mujoco_ros_msgs/SensorNoiseModel[] noise_models\n"
"string admin_hash\n"
"\n"
"================================================================================\n"
"MSG: mujoco_ros_msgs/SensorNoiseModel\n"
"# Set the noise model of a sensor defining mean and standard deviation for each dimension\n"
"# For quaternion sensors noise is calculated in euler angles (rad), converted to a quaternion and then applied. Thus only three mean/std pairs are required!\n"
"string sensor_name\n"
"float64[] mean\n"
"float64[] std\n"
"uint8 set_flag\n"
;
  }

  static const char* value(const ::mujoco_ros_msgs::RegisterSensorNoiseModelsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mujoco_ros_msgs::RegisterSensorNoiseModelsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.noise_models);
      stream.next(m.admin_hash);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RegisterSensorNoiseModelsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mujoco_ros_msgs::RegisterSensorNoiseModelsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mujoco_ros_msgs::RegisterSensorNoiseModelsRequest_<ContainerAllocator>& v)
  {
    s << indent << "noise_models[]" << std::endl;
    for (size_t i = 0; i < v.noise_models.size(); ++i)
    {
      s << indent << "  noise_models[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mujoco_ros_msgs::SensorNoiseModel_<ContainerAllocator> >::stream(s, indent + "    ", v.noise_models[i]);
    }
    s << indent << "admin_hash: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.admin_hash);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MUJOCO_ROS_MSGS_MESSAGE_REGISTERSENSORNOISEMODELSREQUEST_H
